#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("hackathon:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create the socket.
 */
var io = require("socket.io")(server);

io.on("connection", () => {
  console.log("Client connection received");
});

// refresh data
const data = [
  {
    time: "12:00",
    value: 195,
  },
  {
    time: "12:30",
    value: 192,
  },
  {
    time: "13:00",
    value: 191,
  },
  {
    time: "13:30",
    value: 190,
  },
  {
    time: "14:00",
    value: 190,
  },
  {
    time: "14:30",
    value: 190,
  },
  {
    time: "15:00",
    value: 190,
  },
  {
    time: "15:30",
    value: 191,
  },
  {
    time: "16:00",
    value: 192,
  },
  {
    time: "16:30",
    value: 197,
  },
  {
    time: "17:00",
    value: 207,
  },
  {
    time: "17:30",
    value: 221,
  },
  {
    time: "18:00",
    value: 369,
  },
  {
    time: "18:30",
    value: 379,
  },
  {
    time: "19:00",
    value: 389,
  },
  {
    time: "19:30",
    value: 382,
  },
  {
    time: "20:00",
    value: 359,
  },
  {
    time: "20:30",
    value: 268,
  },
  {
    time: "21:00",
    value: 267,
  },
  {
    time: "21:30",
    value: 263,
  },
  {
    time: "22:00",
    value: 259,
  },
  {
    time: "22:30",
    value: 254,
  },
  {
    time: "23:00",
    value: 248,
  },
  {
    time: "23:30",
    value: 241,
  },
  {
    time: "00:00",
    value: 133,
  },
  {
    time: "00:30",
    value: 129,
  },
  {
    time: "01:00",
    value: 131,
  },
  {
    time: "01:30",
    value: 135,
  },
  {
    time: "02:00",
    value: 137,
  },
  {
    time: "02:30",
    value: 138,
  },
  {
    time: "03:00",
    value: 136,
  },
  {
    time: "03:30",
    value: 135,
  },
  {
    time: "04:00",
    value: 136,
  },
  {
    time: "04:30",
    value: 139,
  },
  {
    time: "05:00",
    value: 144,
  },
  {
    time: "05:30",
    value: 149,
  },
  {
    time: "06:00",
    value: 154,
  },
  {
    time: "06:30",
    value: 161,
  },
  {
    time: "07:00",
    value: 172,
  },
  {
    time: "07:30",
    value: 188,
  },
  {
    time: "08:00",
    value: 201,
  },
  {
    time: "08:30",
    value: 209,
  },
  {
    time: "09:00",
    value: 210,
  },
  {
    time: "09:30",
    value: 209,
  },
  {
    time: "10:00",
    value: 206,
  },
  {
    time: "10:30",
    value: 203,
  },
  {
    time: "11:00",
    value: 200,
  },
  {
    time: "11:30",
    value: 198,
  },
];

// Init the app
shiftDataAndEmit();

// Begin the timer
setInterval(function() {
  shiftDataAndEmit();
}, 1500);

function shiftDataAndEmit() {
  const value = data[0];
  data.shift();
  data.push(value);
  io.emit("dataEvent", data);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
